/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.batch.protocol.models;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The Task counts for a Job.
 */
public class TaskCounts {
    /**
     * The number of Tasks in the active state.
     */
    @JsonProperty(value = "active", required = true)
    private int active;

    /**
     * The number of Tasks in the running or preparing state.
     */
    @JsonProperty(value = "running", required = true)
    private int running;

    /**
     * The number of Tasks in the completed state.
     */
    @JsonProperty(value = "completed", required = true)
    private int completed;

    /**
     * The number of Tasks which succeeded. A Task succeeds if its result
     * (found in the executionInfo property) is 'success'.
     */
    @JsonProperty(value = "succeeded", required = true)
    private int succeeded;

    /**
     * The number of Tasks which failed. A Task fails if its result (found in
     * the executionInfo property) is 'failure'.
     */
    @JsonProperty(value = "failed", required = true)
    private int failed;

    /**
     * Get the number of Tasks in the active state.
     *
     * @return the active value
     */
    public int active() {
        return this.active;
    }

    /**
     * Set the number of Tasks in the active state.
     *
     * @param active the active value to set
     * @return the TaskCounts object itself.
     */
    public TaskCounts withActive(int active) {
        this.active = active;
        return this;
    }

    /**
     * Get the number of Tasks in the running or preparing state.
     *
     * @return the running value
     */
    public int running() {
        return this.running;
    }

    /**
     * Set the number of Tasks in the running or preparing state.
     *
     * @param running the running value to set
     * @return the TaskCounts object itself.
     */
    public TaskCounts withRunning(int running) {
        this.running = running;
        return this;
    }

    /**
     * Get the number of Tasks in the completed state.
     *
     * @return the completed value
     */
    public int completed() {
        return this.completed;
    }

    /**
     * Set the number of Tasks in the completed state.
     *
     * @param completed the completed value to set
     * @return the TaskCounts object itself.
     */
    public TaskCounts withCompleted(int completed) {
        this.completed = completed;
        return this;
    }

    /**
     * Get the number of Tasks which succeeded. A Task succeeds if its result (found in the executionInfo property) is 'success'.
     *
     * @return the succeeded value
     */
    public int succeeded() {
        return this.succeeded;
    }

    /**
     * Set the number of Tasks which succeeded. A Task succeeds if its result (found in the executionInfo property) is 'success'.
     *
     * @param succeeded the succeeded value to set
     * @return the TaskCounts object itself.
     */
    public TaskCounts withSucceeded(int succeeded) {
        this.succeeded = succeeded;
        return this;
    }

    /**
     * Get the number of Tasks which failed. A Task fails if its result (found in the executionInfo property) is 'failure'.
     *
     * @return the failed value
     */
    public int failed() {
        return this.failed;
    }

    /**
     * Set the number of Tasks which failed. A Task fails if its result (found in the executionInfo property) is 'failure'.
     *
     * @param failed the failed value to set
     * @return the TaskCounts object itself.
     */
    public TaskCounts withFailed(int failed) {
        this.failed = failed;
        return this;
    }

}
