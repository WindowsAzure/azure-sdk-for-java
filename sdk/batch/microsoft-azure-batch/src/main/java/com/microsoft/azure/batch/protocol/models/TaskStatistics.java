/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.batch.protocol.models;

import org.joda.time.DateTime;
import org.joda.time.Period;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Resource usage statistics for a Task.
 */
public class TaskStatistics {
    /**
     * The URL of the statistics.
     */
    @JsonProperty(value = "url", required = true)
    private String url;

    /**
     * The start time of the time range covered by the statistics.
     */
    @JsonProperty(value = "startTime", required = true)
    private DateTime startTime;

    /**
     * The time at which the statistics were last updated. All statistics are
     * limited to the range between startTime and lastUpdateTime.
     */
    @JsonProperty(value = "lastUpdateTime", required = true)
    private DateTime lastUpdateTime;

    /**
     * The total user mode CPU time (summed across all cores and all Compute
     * Nodes) consumed by the Task.
     */
    @JsonProperty(value = "userCPUTime", required = true)
    private Period userCPUTime;

    /**
     * The total kernel mode CPU time (summed across all cores and all Compute
     * Nodes) consumed by the Task.
     */
    @JsonProperty(value = "kernelCPUTime", required = true)
    private Period kernelCPUTime;

    /**
     * The total wall clock time of the Task. The wall clock time is the
     * elapsed time from when the Task started running on a Compute Node to
     * when it finished (or to the last time the statistics were updated, if
     * the Task had not finished by then). If the Task was retried, this
     * includes the wall clock time of all the Task retries.
     */
    @JsonProperty(value = "wallClockTime", required = true)
    private Period wallClockTime;

    /**
     * The total number of disk read operations made by the Task.
     */
    @JsonProperty(value = "readIOps", required = true)
    private long readIOps;

    /**
     * The total number of disk write operations made by the Task.
     */
    @JsonProperty(value = "writeIOps", required = true)
    private long writeIOps;

    /**
     * The total gibibytes read from disk by the Task.
     */
    @JsonProperty(value = "readIOGiB", required = true)
    private double readIOGiB;

    /**
     * The total gibibytes written to disk by the Task.
     */
    @JsonProperty(value = "writeIOGiB", required = true)
    private double writeIOGiB;

    /**
     * The total wait time of the Task. The wait time for a Task is defined as
     * the elapsed time between the creation of the Task and the start of Task
     * execution. (If the Task is retried due to failures, the wait time is the
     * time to the most recent Task execution.).
     */
    @JsonProperty(value = "waitTime", required = true)
    private Period waitTime;

    /**
     * Get the URL of the statistics.
     *
     * @return the url value
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the URL of the statistics.
     *
     * @param url the url value to set
     * @return the TaskStatistics object itself.
     */
    public TaskStatistics withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the start time of the time range covered by the statistics.
     *
     * @return the startTime value
     */
    public DateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the start time of the time range covered by the statistics.
     *
     * @param startTime the startTime value to set
     * @return the TaskStatistics object itself.
     */
    public TaskStatistics withStartTime(DateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
     *
     * @return the lastUpdateTime value
     */
    public DateTime lastUpdateTime() {
        return this.lastUpdateTime;
    }

    /**
     * Set the time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
     *
     * @param lastUpdateTime the lastUpdateTime value to set
     * @return the TaskStatistics object itself.
     */
    public TaskStatistics withLastUpdateTime(DateTime lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
        return this;
    }

    /**
     * Get the total user mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.
     *
     * @return the userCPUTime value
     */
    public Period userCPUTime() {
        return this.userCPUTime;
    }

    /**
     * Set the total user mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.
     *
     * @param userCPUTime the userCPUTime value to set
     * @return the TaskStatistics object itself.
     */
    public TaskStatistics withUserCPUTime(Period userCPUTime) {
        this.userCPUTime = userCPUTime;
        return this;
    }

    /**
     * Get the total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.
     *
     * @return the kernelCPUTime value
     */
    public Period kernelCPUTime() {
        return this.kernelCPUTime;
    }

    /**
     * Set the total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.
     *
     * @param kernelCPUTime the kernelCPUTime value to set
     * @return the TaskStatistics object itself.
     */
    public TaskStatistics withKernelCPUTime(Period kernelCPUTime) {
        this.kernelCPUTime = kernelCPUTime;
        return this;
    }

    /**
     * Get the total wall clock time of the Task. The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If the Task was retried, this includes the wall clock time of all the Task retries.
     *
     * @return the wallClockTime value
     */
    public Period wallClockTime() {
        return this.wallClockTime;
    }

    /**
     * Set the total wall clock time of the Task. The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If the Task was retried, this includes the wall clock time of all the Task retries.
     *
     * @param wallClockTime the wallClockTime value to set
     * @return the TaskStatistics object itself.
     */
    public TaskStatistics withWallClockTime(Period wallClockTime) {
        this.wallClockTime = wallClockTime;
        return this;
    }

    /**
     * Get the total number of disk read operations made by the Task.
     *
     * @return the readIOps value
     */
    public long readIOps() {
        return this.readIOps;
    }

    /**
     * Set the total number of disk read operations made by the Task.
     *
     * @param readIOps the readIOps value to set
     * @return the TaskStatistics object itself.
     */
    public TaskStatistics withReadIOps(long readIOps) {
        this.readIOps = readIOps;
        return this;
    }

    /**
     * Get the total number of disk write operations made by the Task.
     *
     * @return the writeIOps value
     */
    public long writeIOps() {
        return this.writeIOps;
    }

    /**
     * Set the total number of disk write operations made by the Task.
     *
     * @param writeIOps the writeIOps value to set
     * @return the TaskStatistics object itself.
     */
    public TaskStatistics withWriteIOps(long writeIOps) {
        this.writeIOps = writeIOps;
        return this;
    }

    /**
     * Get the total gibibytes read from disk by the Task.
     *
     * @return the readIOGiB value
     */
    public double readIOGiB() {
        return this.readIOGiB;
    }

    /**
     * Set the total gibibytes read from disk by the Task.
     *
     * @param readIOGiB the readIOGiB value to set
     * @return the TaskStatistics object itself.
     */
    public TaskStatistics withReadIOGiB(double readIOGiB) {
        this.readIOGiB = readIOGiB;
        return this;
    }

    /**
     * Get the total gibibytes written to disk by the Task.
     *
     * @return the writeIOGiB value
     */
    public double writeIOGiB() {
        return this.writeIOGiB;
    }

    /**
     * Set the total gibibytes written to disk by the Task.
     *
     * @param writeIOGiB the writeIOGiB value to set
     * @return the TaskStatistics object itself.
     */
    public TaskStatistics withWriteIOGiB(double writeIOGiB) {
        this.writeIOGiB = writeIOGiB;
        return this;
    }

    /**
     * Get the total wait time of the Task. The wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.).
     *
     * @return the waitTime value
     */
    public Period waitTime() {
        return this.waitTime;
    }

    /**
     * Set the total wait time of the Task. The wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.).
     *
     * @param waitTime the waitTime value to set
     * @return the TaskStatistics object itself.
     */
    public TaskStatistics withWaitTime(Period waitTime) {
        this.waitTime = waitTime;
        return this;
    }

}
